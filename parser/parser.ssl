%  PT Parser Version 5.0
%
% Date:  30 Jun 1980
%        (Revised v5.0 - 10 Dec 2020)
%
% Author:  Alan Rosselet
%
% Abstract
%     This module parses the syntax token stream emitted by the scanner
%     and emits a postfix stream of tokens to the semantic analyzer
%     module.  The parser detects and repairs syntax errors so that the
%     token stream emitted to the semantic analyzer is syntactically
%     legal (except for the special case of declaration phase errors - 
%     see the comment in the Block routine below).

Input :
        % Keywords must be first both here and in stdIdentifiers,
        % and they must appear in the exact same order

        % -------- Removed tokens --------- 
        % pDiv                    'div' (replaced by pSlash)
        % pMod                    'mod' (replaced by pPercent)
        % ---------------------------------
        pOr                     'or'
        firstKeywordToken = pOr
        pAnd                    'and'
        pNot                    'not'
        pThen                   'then'
        pElse                   'else'
        pOf                     'of'
        pEnd                    'end'
        % -------- Removed tokens --------- 
        % pUntil                  'until'
        % pDo                     'do'
        % pArray                  'array'
        % ---------------------------------
        pFile                   'file'
        % -------- Removed tokens --------- 
        % pProgram                'program'
        % pConst                  'const'
        % ---------------------------------
        pUsing                  'using'    % Added Token
        pVal                    'val'      % Added Token
        pVar                    'var'
        % -------- Removed tokens --------- 
        % pType                   'type'
        % pProcedure              'procedure'
        % pBegin                  'begin'
        % ---------------------------------
        pFun                    'fun'      % Added Token
        pIf                     'if'
        % -------- Removed token  --------- 
        % pCase                   'case'
        % ---------------------------------
        pChoose                 'choose'   % Added Token
        pWhile                  'while'
        pRepeat                 'repeat'
        pIs                     'is'       % Added Token
        pElseif                 'elseif'   % Added Token
        pWhen                   'when'     % Added Token
        pLike                   'like'     % Added Token
        pPkg                    'pkg'      % Added Token
        pPublic                 'public'   % Added Token
        lastKeywordToken = pPublic 

        % Scanner tokens -
        %   These are the tokens actually recognized by the Scanner itself.

        % Compound tokens - 
        %   These will be sent to the parser with a value or index.
        pIdentifier 
        firstCompoundInputToken = pIdentifier
        pInteger
        pStringLiteral
        lastCompoundInputToken = pStringLiteral

        % Non-compound tokens - 
        %   These tokens simply represent themselves.
        pNewLine
        pEndFile
        pSlash                  '/'   % Added Token (replaced pDiv)
        pPlus                   '+'
        pMinus                  '-'
        pStar                   '*'
        % -------- Removed token  --------- 
        % pDot                    '.'
        % ---------------------------------
        pComma                  ','
        pSemicolon              ';'
        pColon                  ':'
        pEquals                 '='
        pNotEqual               '!='  % Symbol changed from '<>' to '!='
        pLess                   '<'
        pLessEqual              '<='
        pGreaterEqual           '>='
        pGreater                '>'
        pLeftParen              '('
        pRightParen             ')'
        pLeftBracket            '['
        pRightBracket           ']'
        % -------- Removed token  --------- 
        % pColonEquals            ':='
        % pDotDot                 '..'
        % ---------------------------------

        % -------- Added tokens ----------- 
        pHash                   '#'  
        pPercent                '%'   % Replaced pMod
        pBar                    '|'
        pBang                   '!'
        pBarBar                 '||'
        pPlusEquals             '+='
        pMinusEquals            '-='
        pStarEquals             '*='
        pSlashEquals            '/='
        pPercentEquals          '%='
        pEqualEquals            '=='
        % ---------------------------------
        lastSyntaxToken = pEqualEquals; % Last token is updated to pEqualEquals

Output :
        sIdentifier 
        firstSemanticToken = sIdentifier
        firstCompoundSemanticToken = sIdentifier
        sInteger
        sStringLiteral
        lastCompoundSemanticToken = sStringLiteral

        sProgram
        sParmBegin
        sParmEnd
        sConst
        sLike    % Changed from sType to sLike 
        sVar
        sProcedure
        sBegin
        sEnd
        sNegate
        sArray
        sFile
        sRange
        sCaseStmt
        sCaseEnd
        sLabelEnd
        sExpnEnd
        sNullStmt
        sAssignmentStmt
        sSubscript
        sCallStmt
        sFieldWidth
        sIfStmt
        sThen
        sElse
        sWhileStmt
        sRepeatStmt
        sRepeatEnd
        sEq
        sNE
        sLT
        sLE
        sGT
        sGE
        sAdd
        sSubtract
        sMultiply
        sDivide
        sModulus
        sInfixOr
        sOr
        sInfixAnd
        sAnd
        sNot
        sNewLine
        % --------- Added tokens ---------- 
        sPackage
        sPublic
        sConcatenate
        sRepeatString
        sSubstring
        sLength
        sInitialValue
        sCaseElse
        % ---------------------------------
        sEndOfFile
        lastSemanticToken = sEndOfFile;


rules

Program :
       'using'  .sProgram
        % program name
        pIdentifier
        % program parameters
        {
            pIdentifier  .sIdentifier
            [
                | ',':
                | *:
                    >
            ]
        }
        .sParmEnd
        ';'  @Block;

Block :
        % Strictly speaking, standard Pascal requires that declarations
        % appear only in the order consts, types, vars, procedures.
        % appear only in the order consts, types, vars, fun.
        % We allow arbitrary intermixing of these instead to preserve
        % programmer sanity.
	.sBegin
        {[  
            | pIdentifier:
                @AssignmentOrCallStmt
            | 'using':
                @BeginStmt
            | 'pkg':      % Added to check for packages
                @Package
            | 'if':
                @IfStmt
            | 'choose':
                @CaseStmt
            | 'repeat':
                @RepeatStmt
            | 'public': % Added to check for public 
                [
                    | 'var':
                        @PublicVariableDeclarations
                    | 'fun':
                        @PublicRoutines
                    | *:
                ]
            | 'var':    % Added to check for var
                @VariableDeclarations
            | 'fun':    % Added to check for fun
                @Routines
            | *:
                .sNullStmt
                >
        ]}
        .sEnd;

% New rule added for parsing of packages
Package :
    .sPackage
    pIdentifier 
    .sIdentifier
    'is'
    @Statement;

UnsignedIntegerConstant :
        [
            | pIdentifier:
                .sIdentifier
            | pInteger:
                .sInteger
        ];

OptionallySignedIntegerConstant :
        [
            | '-':
                @UnsignedIntegerConstant
                .sNegate
            | '+':
                @UnsignedIntegerConstant
            | *:
                @UnsignedIntegerConstant
        ];

VariableDeclarations :
        % Accept one or more constant, and like type declaration
        .sVar
        pIdentifier  .sIdentifier
        @ValueOrLike;

PublicVariableDeclarations :
        % a clone of variable declarations with a sPublic emit
        .sVar
        pIdentifier  .sIdentifier
        .sPublic
        @ValueOrLike;

ValueOrLike :
        % variable declarations uses either an inital value 
        % or a like clause to specify the variable's type
        [
            | '=':
            @ConstantDefinitions
            | *:
            @LikeClause 
            ';'
        ];

ConstantDefinitions :
        % Accept one or more named constant definitions
        .sInitialValue
        @Expression
        {[
            | ',':
                pIdentifier .sIdentifier '=' .sInitialValue 
                @Expression
            | ';':
                >
            | *:
        ]};

ConstantValue :
        [
            | pInteger:
                .sInteger
            | pIdentifier:
                .sIdentifier
            | '-':
                @UnsignedIntegerConstant
                .sNegate
            | '+':
                @UnsignedIntegerConstant
            | pStringLiteral:
                .sStringLiteral
        ];

LikeClause :
        % allows for an array bound
        % followed by a colon, optionsal file keyword
        % and a variable or constant
        [
            | '[':
                .sArray @ConstantValue ']'
            | *:
        ]
        ':'
        %an optional file keyword
        [
            | 'file':
                .sFile
            | *:
        ]
        'like' .sLike 
        @ConstantValue;

Routines :
        % parsing of fun routine
        % end with 'end' ';'
        .sProcedure
        % procedure name
        pIdentifier  .sIdentifier
        @ProcedureHeading
        @Block 
        'end'
        ';';

PublicRoutines :
        % a clone of Routines rules, with a sPublic token emit  
        .sProcedure
        % procedure name
        pIdentifier  .sIdentifier
        .sPublic
        @ProcedureHeading
        @Block 
        'end'
        ';';

ProcedureHeading :
        % Accept zero or more procedure formal parameter declarations.
        [
            | '(':
                {
                    % formal parameter identifier
                    [
                        | 'var':
                            .sVar
                            pIdentifier  .sIdentifier
                        | *:
                            pIdentifier  .sIdentifier
                    ]
                    @LikeClause % use like clause instead of type names for parameter types
                    [
                        | ',': % use commas sparate formal parameters
                        | *:
                            >
                    ]
                }
                ')'
            | *:
        ]
        'is'
        .sParmEnd;

Statement :
	@Block;

AssignmentOrCallStmt :
        [
            | '+=':
                .sAssignmentStmt
                .sIdentifier
                .sIdentifier
                @Expression
                .sAdd
                .sExpnEnd
            | '-=':
                .sIdentifier
                .sIdentifier
                @Expression
                .sSubtract
                .sExpnEnd
            | '*=':
                .sIdentifier
                .sIdentifier
                @Expression
                .sMultiply
                .sExpnEnd
            | '/=':
                .sIdentifier
                .sIdentifier
                @Expression
                .sDivide
                .sExpnEnd
            | '%=':
                .sIdentifier
                .sIdentifier
                @Expression
                .sModulus
                .sExpnEnd
            | '=':
                .sAssignmentStmt
                .sIdentifier    % identifier accepted in the Statement rule
                @Expression
                .sExpnEnd
            | '[':
                .sAssignmentStmt
                .sIdentifier
                .sSubscript
                @Expression
                .sExpnEnd
                ']'  '='
                @Expression
                .sExpnEnd
            | *:
                @CallStmt
        ];

CallStmt :
        .sCallStmt
        .sIdentifier    % procedure identifier accepted in the Statement rule
        % accept zero or more actual parameters
        [
            | '(':
                {
                    @Expression
                    .sExpnEnd
                    % allow a field width specification to occur in calls
                    % to the standard procedures write and writeln
                    [
                        | ':':
                            .sFieldWidth
                            @Expression
                            .sExpnEnd
                        | *:
                    ]
                    [
                        | ',':
                        | *:
                            >
                    ]
                }
                ')'
            | *:        % no actual parameters
        ]
        .sParmEnd;

BeginStmt :
        .sBegin
        {
            @Statement
            [
                | ';':
                | 'end':
                    .sEnd
                    >
            ]
        };

IfStmt :
        .sIfStmt
        @Expression
        .sExpnEnd
        'then'  .sThen
        @Statement
        [
            | 'else':
                .sElse
                @Statement
                'if' .sIfStmt
                @Expression

            | *:
        ];

CaseStmt :
        .sCaseStmt
        @Expression
        .sExpnEnd
        'of'
        @CaseAlternative
        {[
            | ';':
                % since case alternatives cannot be null, allow
                % for the common situation of an extra semicolon
                % at the end of the list of case alternatives.
                [
                    | 'end':
                        >
                    | *:
                        @CaseAlternative
                ]
            | 'end':
                >
        ]}
        .sCaseEnd
	.sCaseElse
	@CaseAlternative;

CaseAlternative :
        % A case alternative is a statement labelled by
        % one or more optionally signed integer constants

        {
            @OptionallySignedIntegerConstant
            [
                | ',':
                | *:
                    >
            ]
        }
        .sLabelEnd
        ':'  @Statement;

WhileStmt :
    .sWhileStmt
    @Expression
    .sExpnEnd
    ';';

RepeatStmt :
        [
            | 'while':   % Repeat while option 
	 	        @WhileStmt
                {
                    @Statement
                    [
                        | ';':
                        | 'end':
                            >
                    ]
                }
            | *:  % repeat ... while option
                .sRepeatStmt
                {
                    @Statement
                    [
                        | ';':
                        | 'while':
                            .sRepeatEnd
                            >
                    ]
                }
                @Expression
                .sNot
                .sExpnEnd
        ];
      
       

Expression :
        @SimpleExpression
        [
            | '==':
                @SimpleExpression  .sEq
            | '!=':
                @SimpleExpression  .sNE
            | '<':
                @SimpleExpression  .sLT
            | '<=':
                @SimpleExpression  .sLE
            | '>':
                @SimpleExpression  .sGT
            | '>=':
                @SimpleExpression  .sGE
            | *:
        ];

SimpleExpression :
        [
            | '+':
                @Term
            | '-':
                @Term  .sNegate
            | *:
                @Term
        ]
        {[
            | '+':
                @Term  .sAdd
            | '-':
                @Term  .sSubtract
            | 'or':
                .sInfixOr  @Term  .sOr
            | '|':  % Added for string concatenate operation
                @Term   .sConcatenate
            | '||': % Added for string repeat operation
                @Term   .sRepeatString
            | *:
                >
        ]};

Term :
        @Factor
        {[
            | '*':
                @Factor  .sMultiply
            | '/':  % Added for substring operation
                @Factor
                [
                    | ':':
                    @Factor
                    .sSubstring
                    | *:
                    .sDivide
                ]
            | '%':
                @Factor  .sModulus
            | 'and':
                .sInfixAnd  @Factor  .sAnd
            | *:
                >
        ]};

Factor :
        [
            | pIdentifier:
                .sIdentifier
                @IdentifierExtension 
            | pInteger:
                .sInteger
            | '(':
                @Expression  ')'
            | 'not':
                @Factor
                .sNot
            | '#':  % Added for string length operation
                @Factor
                .sLength
            | pStringLiteral:
                .sStringLiteral
            | 'file':
                .sFile '(' @Expression ')'
                .sExpnEnd
        ];

IdentifierExtension : 
        % Handle subscripts and function actual parameter lists
        [
            | '[':
                .sSubscript
                @Expression  ']'
                .sExpnEnd
            | '(':
                .sParmBegin
                @Expression  ')'
                .sExpnEnd
                .sParmEnd
            | *:
        ];

    

end
